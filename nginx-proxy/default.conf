server {
    listen 80;
    server_name woi-grader.com www.woi-grader.com;
    return 301 https://woi-grader.com$request_uri;
}

# Redirect www to non-www for canonical domain
server {
    listen 443 ssl;
    server_name www.woi-grader.com;
    
    # SSL Certificate Configuration (same as main server)
    ssl_certificate /etc/letsencrypt/live/woi-grader.com/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/woi-grader.com/privkey.pem;
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers 'TLS_AES_128_GCM_SHA256:TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384';
    ssl_prefer_server_ciphers off;
    
    return 301 https://woi-grader.com$request_uri;
}

server {
    listen 443 ssl;
    server_name woi-grader.com;
    client_max_body_size 1G;

    proxy_connect_timeout 60s;
    proxy_send_timeout 60s;
    proxy_read_timeout 60s;

    proxy_set_header Host $host;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto $scheme;

    # SSL Certificate Configuration
    # IMPORTANT: Replace these with the actual paths to your SSL certificate and key.
    # You will also need to mount the directory containing these files into the nginx-proxy container
    # by updating the 'volumes' section in your docker-compose.yml file.
    # For example, if using Certbot/Let's Encrypt, the paths might look like this:
    ssl_certificate /etc/letsencrypt/live/woi-grader.com/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/woi-grader.com/privkey.pem;

    # Recommended SSL settings
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers 'TLS_AES_128_GCM_SHA256:TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384';
    ssl_prefer_server_ciphers off;


    location / {
        # Forward requests to the Frontend Container
        # Docker resolves 'frontend' to the container's IP address
        proxy_pass http://frontend:80;
    }

    location /api/ {
        # Rewrite the URL by removing /api/ prefix before proxying to backend
        rewrite ^/api/(.*)$ /$1 break;
        
        # Handle CORS preflight requests at nginx level
        if ($request_method = 'OPTIONS') {
            add_header 'Access-Control-Allow-Origin' '$http_origin' always;
            add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS' always;
            add_header 'Access-Control-Allow-Headers' 'Content-Type, Authorization, X-Requested-With' always;
            add_header 'Access-Control-Allow-Credentials' 'true' always;
            add_header 'Access-Control-Max-Age' 1728000;
            add_header 'Content-Type' 'text/plain; charset=utf-8';
            add_header 'Content-Length' 0;
            return 204;
        }
        
        # Forward API requests to the Backend Container
        # Docker resolves 'backend' to the container's IP address
        proxy_pass http://backend:3000/;
        proxy_buffering off;
        proxy_http_version 1.1;
        proxy_set_header Connection '';
        
        # Hide CORS headers from backend to prevent duplication
        proxy_hide_header Access-Control-Allow-Origin;
        proxy_hide_header Access-Control-Allow-Methods;
        proxy_hide_header Access-Control-Allow-Headers;
        proxy_hide_header Access-Control-Allow-Credentials;
        
        # Add CORS headers at nginx level for all responses
        add_header 'Access-Control-Allow-Origin' '$http_origin' always;
        add_header 'Access-Control-Allow-Credentials' 'true' always;
        add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS' always;
        add_header 'Access-Control-Allow-Headers' 'Content-Type, Authorization, X-Requested-With' always;
    }
}